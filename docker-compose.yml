services:
  linkedin-scraper:
    build: .
    ports:
      - "8000:8000"
      - "5678:5678" # Debug port
    environment:
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_KEY=${SUPABASE_KEY}
      # CHROME_USER_DATA_DIR is now primarily controlled by Dockerfile's ENV CHROME_PROFILE_PATH_IN_IMAGE
      # and browser.py directly uses /usr/src/app/chrome_profile.
      # We can remove the CHROME_USER_DATA_DIR=/tmp/chrome-profile from here to avoid confusion.
      - DOCKER=true
      - DEBUG=true # Enable debug mode
    volumes:
      - .:/app # Mount source code for live editing (good for development)
    restart: unless-stopped
    shm_size: '2gb' # Increase shared memory for Chrome
    security_opt:
      - seccomp:unconfined # Required for Chrome in container
    cap_add:
      - SYS_ADMIN # Required for Chrome sandboxing
    # Override default command for debugging
    command: python -m debugpy --listen 0.0.0.0:5678 --wait-for-client -m uvicorn main:app --host 0.0.0.0 --port 8000 --reload

# The named volume 'chrome-data' might no longer be needed if its sole purpose was the /tmp/chrome-profile mount.
# If it's not used for anything else, it can be removed from this top-level 'volumes' section too.
# For now, I will leave the definition here in case it was intended for other future use, but it won't be actively used by the linkedin-scraper service for the Chrome profile path we removed.
volumes:
  chrome-data:
